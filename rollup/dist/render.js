!function(t){"use strict";function s(t){return t*Math.PI/180}class i{constructor(t,s,i){null==t?(this.x=0,this.y=0,this.z=0):"object"==typeof t?3==t.length?(this.x=t[0],this.y=t[1],this.z=t[2]):(this.x=t.x,this.y=t.y,this.z=t.z):null==s&&null==i?(this.x=t,this.y=t,this.z=t):(this.x=t,this.y=s,this.z=i)}set(t,s,i){return this.x=t,this.y=s,this.z=i,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}cross(t){return h(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}add(t){return"number"==typeof t?h(this.x+t,this.y+t,this.z+t):h(this.x+t.x,this.y+t.y,this.z+t.z)}sub(t){return"number"==typeof t?h(this.x-t,this.y-t,this.z-t):h(this.x-t.x,this.y-t.y,this.z-t.z)}mul(t){return"number"==typeof t?h(this.x*t,this.y*t,this.z*t):h(this.x*t.x,this.y*t.y,this.z*t.z)}div(t){return"number"==typeof t?h(this.x/t,this.y/t,this.z/t):h(this.x/t.x,this.y/t.y,this.z/t.z)}len2(){return this.x*this.x+this.y*this.y+this.z*this.z}len(){let t=this.x*this.x+this.y*this.y+this.z*this.z;return 0!=t&&1!=t?Math.sqrt(t):t}normalize(){let t=this.x*this.x+this.y*this.y+this.z*this.z;return 0!=t&&1!=t?(t=Math.sqrt(t),h(this.x/t,this.y/t,this.z/t)):h(this)}toArray(){return[this.x,this.y,this.z]}}function h(...t){return new i(...t)}class m{constructor(t=null){null==t?this.m=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]:"object"==typeof t&&4==t.length?this.m=t:this.m=t.m}mul(t){let s;return s=4==t.length?t:t.m,this.m=[[this.m[0][0]*s[0][0]+this.m[0][1]*s[1][0]+this.m[0][2]*s[2][0]+this.m[0][3]*s[3][0],this.m[0][0]*s[0][1]+this.m[0][1]*s[1][1]+this.m[0][2]*s[2][1]+this.m[0][3]*s[3][1],this.m[0][0]*s[0][2]+this.m[0][1]*s[1][2]+this.m[0][2]*s[2][2]+this.m[0][3]*s[3][2],this.m[0][0]*s[0][3]+this.m[0][1]*s[1][3]+this.m[0][2]*s[2][3]+this.m[0][3]*s[3][3]],[this.m[1][0]*s[0][0]+this.m[1][1]*s[1][0]+this.m[1][2]*s[2][0]+this.m[1][3]*s[3][0],this.m[1][0]*s[0][1]+this.m[1][1]*s[1][1]+this.m[1][2]*s[2][1]+this.m[1][3]*s[3][1],this.m[1][0]*s[0][2]+this.m[1][1]*s[1][2]+this.m[1][2]*s[2][2]+this.m[1][3]*s[3][2],this.m[1][0]*s[0][3]+this.m[1][1]*s[1][3]+this.m[1][2]*s[2][3]+this.m[1][3]*s[3][3]],[this.m[2][0]*s[0][0]+this.m[2][1]*s[1][0]+this.m[2][2]*s[2][0]+this.m[2][3]*s[3][0],this.m[2][0]*s[0][1]+this.m[2][1]*s[1][1]+this.m[2][2]*s[2][1]+this.m[2][3]*s[3][1],this.m[2][0]*s[0][2]+this.m[2][1]*s[1][2]+this.m[2][2]*s[2][2]+this.m[2][3]*s[3][2],this.m[2][0]*s[0][3]+this.m[2][1]*s[1][3]+this.m[2][2]*s[2][3]+this.m[2][3]*s[3][3]],[this.m[3][0]*s[0][0]+this.m[3][1]*s[1][0]+this.m[3][2]*s[2][0]+this.m[3][3]*s[3][0],this.m[3][0]*s[0][1]+this.m[3][1]*s[1][1]+this.m[3][2]*s[2][1]+this.m[3][3]*s[3][1],this.m[3][0]*s[0][2]+this.m[3][1]*s[1][2]+this.m[3][2]*s[2][2]+this.m[3][3]*s[3][2],this.m[3][0]*s[0][3]+this.m[3][1]*s[1][3]+this.m[3][2]*s[2][3]+this.m[3][3]*s[3][3]]],this}setIdentity(){return this.m=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]],this}MatrTranslate(t){let s,i,h,m=e();return"object"==typeof t&&(3==t.length?(s=t[0],i=t[1],h=t[2]):(s=t.x,i=t.y,h=t.z)),m.m[3][0]=s,m.m[3][1]=i,m.m[3][2]=h,m}MatrScale(t){let s,i,h,m=e();return"object"==typeof t&&(3==t.length?(s=t[0],i=t[1],h=t[2]):(s=t.x,i=t.y,h=t.z)),m.m[0][0]=s,m.m[1][1]=i,m.m[2][2]=h,m}setRotate(t,s){let i=t*Math.PI,h=Math.sin(i),m=Math.cos(i),e=0,r=0,n=1;"object"==typeof s&&(3==s.length?(e=s[0],r=s[1],n=s[2]):(e=s.x,r=s.y,n=s.z));let o=e*e+r*r+n*n;return 0!=o&&1!=o&&(o=Math.sqrt(o),e/=o,r/=o,n/=o),this.m[0][0]=m+e*e*(1-m),this.m[0][1]=e*r*(1-m)+n*h,this.m[0][2]=e*n*(1-m)-r*h,this.m[0][3]=0,this.m[1][0]=r*e*(1-m)-n*h,this.m[1][1]=m+r*r*(1-m),this.m[1][2]=r*n*(1-m)+e*h,this.m[1][3]=0,this.m[2][0]=n*e*(1-m)+r*h,this.m[2][1]=n*r*(1-m)-e*h,this.m[2][2]=m+n*n*(1-m),this.m[2][3]=0,this.m[3][0]=0,this.m[3][1]=0,this.m[3][2]=0,this.m[3][3]=1,this}setMatrRotateZ(t){let i=(new m).setIdentity,h=s(t),e=Math.cos(h),r=Math.sin(h);return i.m[0][0]=e,i.m[1][1]=e,i.m[0][1]=r,i.m[1][0]=-r,i}setMatrRotateY(t){let i=(new m).setIdentity,h=s(t),e=Math.cos(h),r=Math.sin(h);return i.m[0][0]=e,i.m[2][2]=e,i.m[0][2]=-r,i.m[2][0]=r,i}setMatrRotateX(t){let i=(new m).setIdentity,h=s(t),e=Math.cos(h),r=Math.sin(h);return i.m[1][1]=e,i.m[2][2]=e,i.m[1][2]=r,i.m[2][1]=-r,i}determ3x3(t,s,i,h,m,e,r,n,o){return t*m*o-t*e*n-s*h*o+s*e*r+i*h*n-i*m*r}determ(){return this.m[0][0]*this.determ3x3(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])-this.m[0][1]*this.determ3x3(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])+this.m[0][2]*this.determ3x3(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])-this.m[0][3]*this.determ3x3(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])}inverse(){let t=[[],[],[],[]],s=this.determ();if(0==s){return e([[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]])}return t[0][0]=this.determ3x3(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/s,t[1][0]=-this.determ3x3(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/s,t[2][0]=this.determ3x3(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/s,t[3][0]=-this.determ3x3(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/s,t[0][1]=-this.determ3x3(this.m[0][1],this.m[0][2],this.m[0][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/s,t[1][1]=this.determ3x3(this.m[0][0],this.m[0][2],this.m[0][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/s,t[2][1]=-this.determ3x3(this.m[0][0],this.m[0][1],this.m[0][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/s,t[3][1]=this.determ3x3(this.m[0][0],this.m[0][1],this.m[0][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/s,t[0][2]=this.determ3x3(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[3][1],this.m[3][2],this.m[3][3])/s,t[1][2]=-this.determ3x3(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[3][0],this.m[3][2],this.m[3][3])/s,t[2][2]=this.determ3x3(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[3][0],this.m[3][1],this.m[3][3])/s,t[3][2]=-this.determ3x3(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[3][0],this.m[3][1],this.m[3][2])/s,t[0][3]=-this.determ3x3(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3])/s,t[1][3]=this.determ3x3(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3])/s,t[2][3]=-this.determ3x3(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3])/s,t[3][3]=this.determ3x3(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2])/s,this.m=t,this}setView(t,s,i){let h=s.sub(t).normalize(),m=h.cross(i).normalize(),e=m.cross(h).normalize();return this.m=[[m.x,e.x,-h.x,0],[m.y,e.y,-h.y,0],[m.z,e.z,-h.z,0],[-t.dot(m),-t.dot(e),t.dot(h),1]],this}setOrtho(t,s,i,h,m,e){return this.m=[[2/(s-t),0,0,0],[0,2/(h-i),0,0],[0,0,-2/(e-m),0],[-(s+t)/(s-t),-(h+i)/(h-i),-(e+m)/(e-m),1]],this}setFrustum(t,s,i,h,m,e){return this.m=[[2*m/(s-t),0,0,0],[0,2*m/(h-i),0,0],[(s+t)/(s-t),(h+i)/(h-i),-(e+m)/(e-m),-1],[0,0,-2*m*e/(e-m),0]],this}view(t,s,i){return this.mul(e().setView(t,s,i))}ortho(t,s,i,h,m,r){return this.mul(e().setOrtho(t,s,i,h,m,r))}frustum(t,s,i,h,m,r){return this.mul(e().setFrustum(t,s,i,h,m,r))}transform(t){let s=t.x*this.m[0][3]+t.y*this.m[1][3]+t.z*this.m[2][3]+this.m[3][3];return h((t.x*this.m[0][0]+t.y*this.m[1][0]+t.z*this.m[2][0]+this.m[3][0])/s,(t.x*this.m[0][1]+t.y*this.m[1][1]+t.z*this.m[2][1]+this.m[3][1])/s,(t.x*this.m[0][2]+t.y*this.m[1][2]+t.z*this.m[2][2]+this.m[3][2])/s)}transformVector(t){return h(t.x*this.m[0][0]+t.y*this.m[1][0]+t.z*this.m[2][0],t.x*this.m[0][1]+t.y*this.m[1][1]+t.z*this.m[2][1],t.x*this.m[0][2]+t.y*this.m[1][2]+t.z*this.m[2][2])}transformPoint(t){return h(t.x*this.m[0][0]+t.y*this.m[1][0]+t.z*this.m[2][0]+this.m[3][0],t.x*this.m[0][1]+t.y*this.m[1][1]+t.z*this.m[2][1]+this.m[3][1],t.x*this.m[0][2]+t.y*this.m[1][2]+t.z*this.m[2][2]+this.m[3][2])}toArray(){return[].concat(...this.m)}}function e(...t){return new m(...t)}class r{constructor(){this.projSize=.1,this.projDist=.1,this.projFarClip=1800,this.frameW=1e3,this.frameH=1e3,this.matrView=e(),this.matrProj=e(),this.matrVP=e(),this.loc=h(),this.at=h(),this.dir=h(),this.up=h(),this.right=h(),this.setDef()}set(t,s,i){this.matrView.setView(t,s,i),this.loc=h(t),this.at=h(s),this.dir.set(-this.matrView.m[0][2],-this.matrView.m[1][2],-this.matrView.m[2][2]),this.up.set(this.matrView.m[0][1],this.matrView.m[1][1],this.matrView.m[2][1]),this.right.set(this.matrView.m[0][0],this.matrView.m[1][0],this.matrView.m[2][0]),this.matrVP=e(this.matrView).mul(this.matrProj)}setProj(t,s,i){let h=t,m=t;this.projDist=s,this.projSize=t,this.projFarClip=i,this.frameW>this.frameH?h*=this.frameW/this.frameH:m*=this.frameH/this.frameW,this.matrProj.setFrustum(-h/2,h/2,-m/2,m/2,s,i),this.matrVP=e(this.matrView).mul(this.matrProj)}setSize(t,s){t<1&&(t=1),s<1&&(s=1),this.frameW=t,this.frameH=s,this.setProj(this.projSize,this.projDist,this.projFarClip)}setDef(){this.loc.set(0,-.5,8),this.at.set(1,2,1),this.dir.set(0,0,1),this.up.set(0,1,0),this.right.set(1,0,0),this.projDist=.1,this.projSize=.1,this.projFarClip=1800,this.frameW=1e3,this.frameH=1e3,this.matrView.setView(this.loc,this.at,this.up),this.setProj(this.projSize,this.projDist,this.projFarClip),this.set(this.loc,this.at,this.up),this.setSize(this.frameW,this.frameH)}}function n(t,s){return e(t).mul(s)}class o{constructor(t=null){if(null==t)this.pos=[0,0,0],this.color=[0,0,0,0],this.normal=[0,0,0];else if("object"==typeof t&&3==t.length)this.pos=t[0],this.color=t[1],this.normal=t[2];else if("object"==typeof t&&10==t.length)this.pos=[t[0],t[1],t[2]],this.color=[t[3],t[4],t[5],t[6]],this.normal=[t[7],t[8],t[9]];else{let t=arguments.length;this.pos=[0,0,0],this.color=[0,0,0,0],this.normal=[0,0,0];for(let t=0;t<3;t++)this.pos[t]=arguments[t];for(let t=3;t<7;t++)this.color[t-3]=arguments[t];10==t&&(this.normal=[arguments[7],arguments[8],arguments[9]])}}toArray(){return[].concat(this.pos,this.color,this.normal)}}function a(...t){return new o(...t)}class l{constructor(t,s,i,h,m,r){null==s&&(this.Trans=e().setIdentity(),this.type=t.TRIANGLE_STRIP,this.V=[],this.NumofV=0,this.I=[],this.shd=null),this.Trans=e().setIdentity(),this.type=s,null!=m?(this.NumofElements=m.length,this.IBuf=t.createBuffer()):null!=i&&(this.NumofElements=i.length),this.NV=h,this.VBuf=t.createBuffer(),this.VA=t.createVertexArray(),t.bindVertexArray(this.VA),t.bindBuffer(t.ARRAY_BUFFER,this.VBuf),t.bufferData(t.ARRAY_BUFFER,new Float32Array(i),t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.IBuf),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Int32Array(m),t.STATIC_DRAW),t.vertexAttribPointer(0,3,t.FLOAT,!1,40,0),t.vertexAttribPointer(1,4,t.FLOAT,!1,40,12),t.vertexAttribPointer(2,3,t.FLOAT,!1,40,28),t.enableVertexAttribArray(0),t.enableVertexAttribArray(1),t.enableVertexAttribArray(2),t.bindVertexArray(null),this.shader=r,this.gl=t}}function u(...t){return new l(...t)}function f(t,s,i){let h=n(t.Trans,i),m=function(t){let s=e([[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]);for(let i=0;i<4;i++)for(let h=0;h<4;h++)s.m[i][h]=t.m[h][i];return s}(e(h).inverse()),r=e(h).mul(s.matrVP);t.gl.useProgram(t.shader),t.gl.bindVertexArray(t.VA);let o=t.gl.getUniformLocation(t.shader,"MatrWVP");null!=o&&t.gl.uniformMatrix4fv(o,!1,new Float32Array(r.toArray()));let a=t.gl.getUniformLocation(t.shader,"MatrW");null!=a&&t.gl.uniformMatrix4fv(a,!1,new Float32Array(h.toArray()));let l=t.gl.getUniformLocation(t.shader,"MatrInv");null!=l&&t.gl.uniformMatrix4fv(l,!1,new Float32Array(m.toArray()));let u=t.gl.getUniformLocation(t.shader,"CamLoc");null!=u&&t.gl.uniform3fv(u,new Float32Array(s.loc.toArray()));let f=t.gl.getUniformLocation(t.shader,"CamDir");null!=f&&t.gl.uniform3fv(f,new Float32Array(s.dir.toArray())),null!=t.IBuf?(t.gl.bindBuffer(t.gl.ELEMENT_ARRAY_BUFFER,t.IBuf),t.gl.drawElements(t.type,t.NumofElements,t.gl.UNSIGNED_INT,0),t.gl.bindBuffer(t.gl.ELEMENT_ARRAY_BUFFER,null)):t.gl.drawArrays(t.type,0,t.NumofElements),t.gl.bindVertexArray(null),t.gl.useProgram(null)}async function c(t,s){const i=async function(t){try{const s=await fetch(t);return await s.text()}catch(t){console.log(t)}}(s);return Promise.all([i]).then((s=>{const i=s[0].split("\n");let m=[],e=[];for(let t=0;t<i.length;t++){let s=i[t];if("v"==s[0]&&" "==s[1]){let t,i,h,e=s.split(" ");t=parseFloat(e[1]),i=parseFloat(e[2]),h=parseFloat(e[3]);let r=a();r.pos=[t,i,h],r.color=[0,.7,.5,1],m.push(r)}else if("f"==s[0]&&" "==s[1]){let t,i,h,m=s.split(" ");t=parseInt(m[1].split("//")[0])-1,i=parseInt(m[2].split("//")[0])-1,h=parseInt(m[3].split("//")[0])-1,e.push(t,i,h)}}for(let t=0;t<e.length;t+=3){let s=h(m[e[t]].pos),i=h(m[e[t+1]].pos),r=h(m[e[t+2]].pos),n=i.sub(s).cross(r.sub(s)).normalize();m[e[t]].normal=h(m[e[t]].normal).add(n).toArray(),m[e[t+1]].normal=h(m[e[t+1]].normal).add(n).toArray(),m[e[t+2]].normal=h(m[e[t+2]].normal).add(n).toArray()}for(let t=0;t<m.length;t++)m[t].normal=h(m[t].normal).normalize().toArray();console.log(t);let r=u(t.gl,t.type,function(t){let s=[];for(let i=0;i<t.length;i++)s.push(...t[i].toArray());return s}(m),m.lenght,e,t.shader);return r}))}async function y(t){try{const s=await fetch(t);return await s.text()}catch(t){console.log(t)}}function x(t,s,i){const h=t.createShader(s);if(t.shaderSource(h,i),t.compileShader(h),!t.getShaderParameter(h,t.COMPILE_STATUS)){let s=t.getShaderInfoLog(h);console.log(s)}return h}function d(){const t=document.getElementById("glCanvas").getContext("webgl2");t.clearColor(.5,0,.5,1),t.clear(t.COLOR_BUFFER_BIT);let s=[0,0,1,0,1,0,1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,1,1,1,0,1,1,0,0,1,0,1,1,0,1,1,-1,0,0,1,1,1,0,1,1,1,-1,0,0,1,1,0,1,0,0,1,-1,0,0,1,0,0,0,1,0,1,-1,0,0,1,0,0,1,0,1,1,0,1,0,0,0,0,1,.5,1,.3,0,1,0,0,1,0,1,1,.4,1,0,1,0,1,1,0,1,1,.5,.4,0,1,0,0,0,0,1,0,0,1,0,-1,0,0,0,1,1,0,0,1,0,-1,0,0,1,1,1,0,1,1,0,-1,0,0,1,0,1,0,0,1,0,-1,0,0,1,1,1,0,0,1,0,0,1,0,1,0,1,1,1,1,0,0,1,1,1,0,1,0,0,1,0,0,1,1,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,1,0,0,-1,0,0,0,1,0,0,1,0,0,-1,1,0,0,1,0,0,1,0,0,-1,1,0,1,1,0,1,1,0,0,-1],i=[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23];const m=y("./bin/vert.vert"),o=y("./bin/frag.frag");Promise.all([m,o]).then((m=>{const o=x(t,t.VERTEX_SHADER,m[0]),a=x(t,t.FRAGMENT_SHADER,m[1]),l=t.createProgram();t.attachShader(l,o),t.attachShader(l,a),t.linkProgram(l),t.createBuffer();let y=function(...t){return new r(...t)}(),d=u(t,t.TRIANGLES,s,24,i,l);c(d,"./bin/cow.obj").then((s=>{d=s;const i=()=>{t.enable(t.DEPTH_TEST),f(d,y,n(e().setRotate(Math.sin(Date.now()/787),h(2,4,3)),e().MatrScale([.1,.1,.1]))),window.requestAnimationFrame(i)};i()}))}))}window.addEventListener("load",(()=>{d()})),t.initGL=d,t.vec3=h}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
